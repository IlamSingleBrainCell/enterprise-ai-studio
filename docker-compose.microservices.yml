# Enterprise AI Studio - Microservices Architecture
# Complete Docker Compose configuration for production deployment

version: '3.8'

services:
  # Redis Message Broker
  redis:
    image: redis:7-alpine
    container_name: enterprise_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  # PostgreSQL Database
  postgres:
    image: bitnami/postgresql:15
    container_name: enterprise_ai_db
    environment:
      POSTGRESQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-admin_password_123}
      POSTGRESQL_DATABASE: enterprise_ai_studio
      POSTGRESQL_USERNAME: aiuser
      POSTGRESQL_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/bitnami/postgresql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U aiuser -d enterprise_ai_studio"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - enterprise_ai_network

  # Phi-4 AI Service
  phi4-service:
    build:
      context: ./microservices/phi4-service
      dockerfile: Dockerfile
    container_name: enterprise_ai_phi4
    environment:
      - PYTHONPATH=/app
      - TRANSFORMERS_CACHE=/app/.cache
      - HF_HOME=/app/.cache
    volumes:
      - phi4_cache:/app/.cache
    ports:
      - "8001:8001"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    networks:
      - enterprise_ai_network

  # Agent Orchestrator Service
  agent-orchestrator:
    build:
      context: ./microservices/agent-orchestrator
      dockerfile: Dockerfile
    container_name: enterprise_ai_orchestrator
    environment:
      - REDIS_URL=redis://redis:6379
      - PHI4_SERVICE_URL=http://phi4-service:8001
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      phi4-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  # API Gateway
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: enterprise_ai_gateway
    environment:
      - ORCHESTRATOR_URL=http://agent-orchestrator:8000
      - PHI4_URL=http://phi4-service:8001
    ports:
      - "8080:8080"
    depends_on:
      agent-orchestrator:
        condition: service_healthy
      phi4-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  # Frontend Web Application
  frontend:
    build:
      context: .
      dockerfile: microservices/frontend/Dockerfile
    container_name: enterprise_ai_frontend
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
      - API_GATEWAY_URL=http://api-gateway:8080
    volumes:
      - ./microservices/enterprise-ui.html:/usr/share/nginx/html/index.html:ro
      - ./microservices/frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: enterprise_ai_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./microservices/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - enterprise_ai_network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: enterprise_ai_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./microservices/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./microservices/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - enterprise_ai_network
    profiles:
      - monitoring

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: enterprise_ai_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - enterprise_ai_network
    profiles:
      - logging

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: enterprise_ai_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - enterprise_ai_network
    profiles:
      - logging

  # Load Balancer (HAProxy)
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: enterprise_ai_loadbalancer
    volumes:
      - ./microservices/loadbalancer/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "443:443"
      - "8443:8443"
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - enterprise_ai_network
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  phi4_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  enterprise_ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16