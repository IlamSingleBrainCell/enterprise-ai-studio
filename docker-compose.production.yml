# Enterprise AI Studio - Production Deployment with Phi-4
# Use this for client deployment with real Phi-4 model

version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: enterprise_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  postgres:
    image: bitnami/postgresql:15
    container_name: enterprise_ai_db
    environment:
      POSTGRESQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-admin_password_123}
      POSTGRESQL_DATABASE: enterprise_ai_studio
      POSTGRESQL_USERNAME: aiuser
      POSTGRESQL_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/bitnami/postgresql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U aiuser -d enterprise_ai_studio"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - enterprise_ai_network

  # AI Services
  phi4-service:
    build:
      context: ./microservices/phi4-service
      dockerfile: Dockerfile
    container_name: enterprise_ai_phi4
    environment:
      - PYTHONPATH=/app
      - TRANSFORMERS_CACHE=/app/.cache
      - HF_HOME=/app/.cache
      - REDIS_URL=redis://redis:6379
    volumes:
      - phi4_cache:/app/.cache
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 12G
        reservations:
          memory: 8G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s  # 5 minutes for model loading
    networks:
      - enterprise_ai_network

  agent-orchestrator:
    build:
      context: ./microservices/agent-orchestrator
      dockerfile: Dockerfile
    container_name: enterprise_ai_orchestrator
    environment:
      - REDIS_URL=redis://redis:6379
      - AI_SERVICE_URL=http://phi4-service:8001
    ports:
      - "8002:8002"
    depends_on:
      redis:
        condition: service_healthy
      phi4-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: enterprise_ai_gateway
    environment:
      - ORCHESTRATOR_URL=http://agent-orchestrator:8002
      - AI_SERVICE_URL=http://phi4-service:8001
    ports:
      - "8080:8080"
    depends_on:
      agent-orchestrator:
        condition: service_healthy
      phi4-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  frontend:
    build:
      context: .
      dockerfile: microservices/frontend/Dockerfile
    container_name: enterprise_ai_frontend
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
      - API_GATEWAY_URL=http://api-gateway:8080
    volumes:
      - ./microservices/enterprise-ui.html:/usr/share/nginx/html/index.html:ro
      - ./microservices/frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: enterprise_ai_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./microservices/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - enterprise_ai_network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  phi4_cache:
    driver: local
  prometheus_data:
    driver: local

networks:
  enterprise_ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16