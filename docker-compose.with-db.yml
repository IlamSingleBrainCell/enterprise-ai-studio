services:
  # Database - Using Bitnami PostgreSQL
  postgres:
    image: bitnami/postgresql:15
    container_name: enterprise_ai_db
    environment:
      POSTGRESQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-admin_password_123}
      POSTGRESQL_DATABASE: enterprise_ai_studio
      POSTGRESQL_USERNAME: aiuser
      POSTGRESQL_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: replicator
      POSTGRESQL_REPLICATION_PASSWORD: ${DB_REPLICATION_PASSWORD:-repl_password_123}
    volumes:
      - postgres_data:/bitnami/postgresql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U aiuser -d enterprise_ai_studio"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - enterprise_ai_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: enterprise_ai_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://aiuser:${DB_PASSWORD:-secure_password_123}@postgres:5432/enterprise_ai_studio
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      PGSSLMODE: disable
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  # Frontend
  enterprise_ai_studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: enterprise_ai_studio_app
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
      - NGINX_HOST=localhost
      - NGINX_PORT=80
      - BACKEND_URL=http://backend:3001
    volumes:
      - ./logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network

  # Redis for sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: enterprise_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise_ai_network
    profiles:
      - full

volumes:
  postgres_data:
  redis_data:

networks:
  enterprise_ai_network:
    driver: bridge